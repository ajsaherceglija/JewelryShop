create table if not exists brands
(
    BID    int auto_increment
        primary key,
    b_name varchar(200) not null,
    phone  varchar(50)  null,
    email  varchar(50)  null
);

create table if not exists categories
(
    CRID    int auto_increment
        primary key,
    c_name varchar(200) not null
);

create table if not exists people
(
    PID        int auto_increment
        primary key,
    username   varchar(100)                          not null,
    p_password varchar(200)                          not null,
    email      varchar(50)                           not null,
    f_name     varchar(50)                           null,
    l_name     varchar(50)                           null,
    DOB        date                                  null,
    phone      varchar(50)                           null,
    p_type     enum ('admin', 'user') default 'user' null,
    constraint email
        unique (email),
    constraint username
        unique (username)
);

create table if not exists addresses
(
    AID         int auto_increment
        primary key,
    country     varchar(50)  not null,
    city        varchar(50)  not null,
    postal_code varchar(20)  not null,
    a_address   varchar(100) not null,
    people      int          not null,
    constraint addresses_ibfk_1
        foreign key (people) references people (PID)
);

create index people
    on addresses (people);

create table if not exists orders
(
    OID       int auto_increment
        primary key,
    o_address int         not null,
    status    varchar(50) null,
    o_date    date        not null,
    constraint orders_ibfk_1
        foreign key (o_address) references addresses (AID)
);

create index o_address
    on orders (o_address);

create table if not exists products
(
    PID           int auto_increment
        primary key,
    category      int            not null,
    brand         int            not null,
    image         varchar(200)   null,
    p_name        varchar(200)   not null,
    p_description varchar(500)   null,
    regular_price decimal(10, 2) null,
    current_price decimal(10, 2) null,
    quantity      int            not null,
    constraint products_ibfk_1
        foreign key (category) references categories (CRID),
    constraint products_ibfk_2
        foreign key (brand) references brands (BID)
);

create table if not exists order_details
(
    OID       int auto_increment
        primary key,
    quantity  int            not null,
    price     decimal(10, 2) null,
    o_order   int            not null,
    o_product int            not null,
    constraint order_details_ibfk_1
        foreign key (o_order) references orders (OID),
    constraint order_details_ibfk_2
        foreign key (o_product) references products (PID)
);

create index o_order
    on order_details (o_order);

create index o_product
    on order_details (o_product);

create index brand
    on products (brand);

create index category
    on products (category);

create table if not exists reviews
(
    RID         int auto_increment
        primary key,
    rating      int          not null,
    r_comment   varchar(500) null,
    r_date      date         not null,
    valid_until date         null,
    people      int          not null,
    product   int          not null,
    constraint reviews_ibfk_1
        foreign key (people) references people (PID),
    constraint reviews_ibfk_2
        foreign key (product) references products (PID),
    check ((`rating` >= 1) and (`rating` <= 5))
);

create index people
    on reviews (people);

create index product
    on reviews (product);

create table if not exists wishlists
(
    WID         int auto_increment
        primary key,
    date_added  date         not null,
    valid_until date         null,
    w_comment   varchar(200) null,
    w_product   int          not null,
    people      int          not null,
    constraint wishlists_ibfk_1
        foreign key (people) references people (PID),
    constraint wishlists_ibfk_2
        foreign key (w_product) references products (PID)
);

create index people
    on wishlists (people);

create index w_product
    on wishlists (w_product);


create definer = root@localhost trigger update_avg_rating
    after insert
    on reviews
    for each row
BEGIN
    DECLARE avg_rating DECIMAL(3,2);

    SELECT AVG(rating) INTO avg_rating
    FROM reviews
    WHERE product = NEW.product;

    UPDATE products
    SET avg_rating = avg_rating
    WHERE pid = NEW.product;
END;
