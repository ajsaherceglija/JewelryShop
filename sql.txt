create table if not exists brands
(
    BID    int auto_increment
        primary key,
    b_name varchar(200) not null,
    phone  varchar(50)  null,
    email  varchar(50)  null
);

create table if not exists categories
(
    CRID   int auto_increment
        primary key,
    c_name varchar(200) not null
);

create table if not exists people
(
    PID        int auto_increment
        primary key,
    username   varchar(100)                          not null,
    p_password varchar(200)                          not null,
    email      varchar(50)                           not null,
    f_name     varchar(50)                           null,
    l_name     varchar(50)                           null,
    DOB        date                                  null,
    phone      varchar(50)                           null,
    p_type     enum ('admin', 'user') default 'user' null,
    constraint email
        unique (email),
    constraint username
        unique (username)
);

create table if not exists addresses
(
    AID         int auto_increment
        primary key,
    country     varchar(50)  null,
    city        varchar(50)  null,
    postal_code varchar(20)  null,
    a_address   varchar(100) null,
    people      int          not null,
    constraint addresses_ibfk_1
        foreign key (people) references people (PID)
);

create index people
    on addresses (people);

create table if not exists orders
(
    OID         int auto_increment
        primary key,
    o_address   int                         not null,
    status      varchar(50)                 null,
    o_date      date                        not null,
    total_price decimal(10, 2) default 0.00 null,
    constraint orders_ibfk_1
        foreign key (o_address) references addresses (AID)
);

create index o_address
    on orders (o_address);

create table if not exists products
(
    pid           int auto_increment
        primary key,
    category      int                        not null,
    brand         int                        not null,
    p_image       varchar(200)               null,
    p_name        varchar(200)               not null,
    description   varchar(500)               null,
    regular_price decimal(10, 2)             null,
    current_price decimal(10, 2)             null,
    quantity      int                        not null,
    avg_rating    decimal(3, 2) default 0.00 null,
    constraint products_ibfk_1
        foreign key (category) references categories (CRID),
    constraint products_ibfk_2
        foreign key (brand) references brands (BID)
);

create table if not exists order_details
(
    OID       int auto_increment
        primary key,
    quantity  int            not null,
    price     decimal(10, 2) null,
    o_order   int            not null,
    o_product int            not null,
    constraint order_details_ibfk_1
        foreign key (o_order) references orders (OID),
    constraint order_details_ibfk_2
        foreign key (o_product) references products (pid)
);

create index o_order
    on order_details (o_order);

create index o_product
    on order_details (o_product);

create definer = root@`%` trigger update_total_price_after_delete
    after delete
    on order_details
    for each row
BEGIN
    UPDATE orders
    SET total_price = (
        SELECT IFNULL(SUM(price * quantity), 0)
        FROM order_details
        WHERE o_order = OLD.o_order
    )
    WHERE OID = OLD.o_order;
END;

create definer = root@`%` trigger update_total_price_after_insert
    after insert
    on order_details
    for each row
BEGIN
    UPDATE orders
    SET total_price = (
        SELECT IFNULL(SUM(price * quantity), 0)
        FROM order_details
        WHERE o_order = NEW.o_order
    )
    WHERE OID = NEW.o_order;
END;

create definer = root@`%` trigger update_total_price_after_update
    after update
    on order_details
    for each row
BEGIN
    UPDATE orders
    SET total_price = (
        SELECT IFNULL(SUM(price * quantity), 0)
        FROM order_details
        WHERE o_order = NEW.o_order
    )
    WHERE OID = NEW.o_order;
END;

create index brand
    on products (brand);

create index category
    on products (category);

create table if not exists reviews
(
    RID         int auto_increment
        primary key,
    rating      int          not null,
    comment     varchar(500) null,
    r_date      date         not null,
    valid_until date         null,
    people      int          not null,
    product     int          not null,
    constraint reviews_ibfk_1
        foreign key (people) references people (PID),
    constraint reviews_ibfk_2
        foreign key (product) references products (pid),
    check ((`rating` >= 1) and (`rating` <= 5))
);

create index people
    on reviews (people);

create index r_product
    on reviews (product);

create definer = root@`%` trigger update_avg_rating
    after insert
    on reviews
    for each row
BEGIN
    DECLARE avg_rating DECIMAL(3,2);

    SELECT AVG(rating) INTO avg_rating
    FROM reviews
    WHERE product = NEW.product;

    UPDATE products
    SET avg_rating = avg_rating
    WHERE pid = NEW.product;
END;

create table if not exists wishlists
(
    WID         int auto_increment
        primary key,
    date_added  date         not null,
    valid_until date         null,
    w_comment   varchar(200) null,
    w_product   int          not null,
    people      int          not null,
    constraint wishlists_ibfk_1
        foreign key (people) references people (PID),
    constraint wishlists_ibfk_2
        foreign key (w_product) references products (pid)
);

create index people
    on wishlists (people);

create index w_product
    on wishlists (w_product);

CREATE VIEW low_stock_products AS
SELECT p.pid, p.p_name, p.description, p.regular_price, p.current_price,
       p.quantity, p.p_image, c.c_name AS category_name, b.b_name AS brand_name
FROM products p
         LEFT JOIN categories c ON p.category = c.CRID
         LEFT JOIN brands b ON p.brand = b.BID
WHERE p.quantity <= 5;

INSERT INTO brands (b_name, email, phone)
VALUES ('CARTIER', 'cartier@gmail.com', '062 934 638'),
       ('VERSACE', NULL, NULL),
       ('BVLGARI', NULL, NULL),
       ('TIFFANY', NULL, NULL),
       ('PANDORA', 'pandora@test', NULL)
;
INSERT INTO categories (c_name)
VALUES ('RINGS'), ('EARRINGS'), ('NECKLACES'), ('BRACELETS')
;
INSERT INTO products (category, brand, p_image, p_name, description, regular_price, current_price, quantity)
VALUES ('1', '1', '../images/ring1.png', 'Diamond Ring', 'gold', '300.00', '300.00', '5'),
       ('1', '2', '../images/ring2.jpg', 'Silver Ring', 'silver', '80.00', '80.00', '8'),
       ('1', '3', '../images/ring3.jpg', 'Engagement Ring', 'silver', '200.00', '220.00', '3'),
       ('1', '4', '../images/ring4.jpg', 'Intertwining Leaves Ring', 'rose gold', '250.00', '250.00', '10'),
       ('1', '5', '../images/ring5.jpg', 'Diamond Idyllic Ring', 'gold', '177.20', '177.20', '2'),
       ('2', '1', '../images/earring1.jpg', 'Gold Hoop Earrings', '14k gold', '189.90', '189.90', '9'),
       ('2', '2', '../images/earring2.jpg', 'Silver Earrings', 'silver', '68.00', '68.00', '4'),
       ('2', '3', '../images/earring3.jpg', 'Round Diamond Earrings', '18k white gold', '250.00', '250.00', '3'),
       ('2', '4', '../images/earring4.jpg', 'Pearl Earrings', 'silver', '102.00', '82.00', '1'),
       ('2', '5', '../images/earring5.jpg', 'Eucalyptus Leaf Earrings', '24k gold', '800.00', '800.00', '3'),
       ('3', '1', '../images/necklace1.jpg', 'Golden Necklace', 'gold', '350.00', '350.00', '12'),
       ('3', '2', '../images/necklace2.jpg', 'Heart Necklace', 'gold', '500.00', '500.00', '4'),
       ('3', '3', '../images/necklace3.jpg', 'Diamond Necklace', 'silver', '467.00', '467.00', '8'),
       ('3', '4', '../images/necklace4.jpg', 'Pearl Necklace', 'gold', '200.00', '200.00', '6'),
       ('3', '5', '../images/necklace5.jpg', 'Maldives Gold Necklace', 'gold', '500.00', '500.00', '7'),
       ('4', '1', '../images/bracelet1.jpg', 'Juste un Clou Bracelet', '18k yellow gold', '5000.00', '5000.00', '10'),
       ('4', '2', '../images/bracelet2.jpg', 'Diamond Bracelet', 'silver', '1000.00', '1000.00', '2'),
       ('4', '3', '../images/bracelet3.jpg', 'Heart Bracelet', 'gold', '235.00', '235.00', '15'),
       ('4', '4', '../images/bracelet4.jpg', 'Personalized Bracelet', 'silver', '60.00', '60.00', '8'),
       ('4', '5', '../images/bracelet5.jpg', 'Chain Bracelet', 'gold', '500.00', '500.00', '5')
;
create or replace definer = root@`%` view low_stock_products as
select `p`.`pid`           AS `pid`,
       `p`.`p_name`        AS `p_name`,
       `p`.`description`   AS `description`,
       `p`.`regular_price` AS `regular_price`,
       `p`.`current_price` AS `current_price`,
       `p`.`quantity`      AS `quantity`,
       `p`.`p_image`       AS `p_image`,
       `c`.`c_name`        AS `category_name`,
       `b`.`b_name`        AS `brand_name`
from ((`jewelry_store`.`products` `p` left join `jewelry_store`.`categories` `c`
       on ((`p`.`category` = `c`.`CRID`))) left join `jewelry_store`.`brands` `b` on ((`p`.`brand` = `b`.`BID`)))
where (`p`.`quantity` <= 5);

create
    definer = root@`%` procedure add_new_product(IN p_category int, IN p_brand int, IN p_image varchar(200),
                                                 IN p_name varchar(200), IN p_description varchar(500),
                                                 IN p_regular_price decimal(10, 2), IN p_current_price decimal(10, 2),
                                                 IN p_quantity int)
BEGIN
    INSERT INTO products (category, brand, p_image, p_name, description, regular_price, current_price, quantity)
    VALUES (p_category, p_brand, p_image, p_name, p_description, p_regular_price, p_current_price, p_quantity);
END;

create
    definer = root@`%` function calculate_discounted_price(product_id int, discount_percentage decimal(5, 2)) returns decimal(10, 2)
BEGIN
    DECLARE discounted_price DECIMAL(10, 2);
    SELECT regular_price * (1 - discount_percentage / 100) INTO discounted_price
    FROM products
    WHERE pid = product_id;
    RETURN discounted_price;
END;

create
    definer = root@`%` function get_average_rating(product_id int) returns decimal(3, 2)
BEGIN
    DECLARE avg_rating DECIMAL(3, 2);
    SELECT AVG(rating) INTO avg_rating
    FROM reviews
    WHERE product = product_id;
    RETURN avg_rating;
END;

create
    definer = root@`%` procedure update_product_quantity(IN p_id int, IN new_quantity int)
BEGIN
    UPDATE products
    SET quantity = new_quantity
    WHERE pid = p_id;
END;

create index idx_review_rating
    on reviews (rating);

create index idx_product_name
    on products (p_name);

create index idx_people_email
    on people (email);

create index idx_order_status
    on orders (status);